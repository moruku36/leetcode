class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        # 各数値の補数を格納するための辞書を作成する
        complements = {}
        # 数値の配列をループする
        for i in range(len(nums)):
            # 現在の数値が以前の数値の補数であるかどうかをチェックする
            if nums[i] in complements:
                # ターゲットになるように足し合わせた二つの数値のインデックスを返す
                return [complements[nums[i]], i]
            else:
                # 現在の数値の補数とそのインデックスを辞書に格納する
                complements[target - nums[i]] = i
        # 解答が見つからない場合は空のリストを返す
        return []
        
''' 
まず、各数値の補数を格納するための辞書を作成します。補数とは、ある数値と足し合わせるとターゲットになる数値のことです。例えば、ターゲットが9であれば、2の補数は7、7の補数は2です。
次に、数値の配列をループします。ループ中に現在の数値を変数iでインデックス付けします。
ループ内で、現在の数値が辞書に含まれているかどうかをチェックします。辞書に含まれている場合は、それは以前に見た数値の補数であることを意味します。つまり、その二つの数値がターゲットになるように足し合わせられます。
その場合は、辞書から現在の数値に対応するインデックスを取り出し、それと変数iをリストにして返します。これが解答です。
辞書に含まれていない場合は、現在の数値の補数とそのインデックスを辞書に格納します。これは後で別の数値とマッチする可能性があるからです。
ループが終了するまでこの処理を繰り返します。もしループが終了しても解答が見つからない場合は、空のリストを返します。
''' 
